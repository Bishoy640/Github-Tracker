{"version":3,"sources":["wallpaper.js","nav.js","searchbar.js","persons.js","App.js","serviceWorker.js","index.js"],"names":["wallpaper","className","nav","style","flexGrow","searchbar","props","onSubmit","submit","type","placeholder","onChange","change","persons","src","imageURL","alt","key","id","name","href","personURL","App","state","outputPersons","loading","personsJSX","value","url","doIt","getSearch","event","setState","target","preventDefault","persist","submitToSearch","e","a","fetch","response","json","data","verify","items","map","person","index","login","avatar_url","html_url","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mXA2BeA,G,YAxBG,WACd,OACI,yBAAKC,UAAU,QAEX,wBAAIA,UAAU,WACV,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,iCCEDC,G,YAhBH,WACR,OACI,yBAAKD,UAAU,OAEX,wBAAIE,MAAO,CAAEC,SAAU,MAAQH,UAAU,SAAzC,kBACA,yBAAKE,MAAO,CAAEC,SAAU,MAAQH,UAAU,YAC1C,4BAASA,UAAU,eAAnB,QACA,4BAAQA,UAAU,gBAAlB,aCmBGI,EAvBG,SAACC,GAEf,OACI,6BACI,kBAAC,EAAD,MACA,yBAAKL,UAAU,aAEX,0BAAMA,UAAU,UAAUM,SAAUD,EAAME,QACtC,2BAAOC,KAAK,OAAOC,YAAY,WAAWC,SAAUL,EAAMM,SAC1D,4BAAQX,UAAU,eAAeQ,KAAK,UAAS,uBAAGR,UAAU,oBAIpE,yBAAKA,UAAU,WACX,uBAAGA,UAAU,eAAb,gCCODY,G,MAtBC,SAACP,GACb,OACI,yBAAKL,UAAU,WACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,UAEX,yBAAKa,IAAKR,EAAMS,SAAUC,IAAI,aAAaf,UAAU,QAAQgB,IAAKX,EAAMY,KACxE,4BAAKZ,EAAMa,MAEX,yBAAKlB,UAAU,YAAW,uBAAGA,UAAU,QAAQmB,KAAMd,EAAMe,WACvD,2BAAG,0BAAMpB,UAAU,OAAY,0BAAMA,UAAU,SAAc,0BAAMA,UAAU,QAAhB,sBCuItEqB,E,4MAzIbC,MAAQ,CACNC,cAAe,IACfC,SAAS,EACTC,WAAY,KACZC,MAAO,IACPC,IAAK,KACLC,MAAM,G,EAwBRC,UAAY,SAACC,GACX,EAAKC,SAAS,CAAEL,MAAOI,EAAME,OAAON,QACpCI,EAAMG,iBACNH,EAAMI,W,EAMRC,e,uCAAiB,WAAOC,GAAP,mBAAAC,EAAA,6DAIfD,EAAEH,iBACFG,EAAEF,UAEIP,EAAM,yCAA2C,EAAKL,MAAMI,MAAQ,sBAP3D,SASQY,MAAMX,GATd,cASTY,EATS,gBAUIA,EAASC,OAVb,OAUTC,EAVS,OAWf,EAAKV,SAAS,CACZW,OAAQD,EAAKE,MAAM,GACnB/B,QAAS6B,EAAKE,MAEdnB,SAAS,IAIX,EAAKO,SAAS,CACZN,WACE,yBAAKzB,UAAU,oBACZ,EAAKsB,MAAMV,QAAQgC,KAAI,SAACC,EAAQC,GAE/B,OAAO,kBAAC,EAAD,CACL5B,KAAM2B,EAAOE,MACb/B,IAAK6B,EAAO5B,GACZH,SAAU+B,EAAOG,WACjB5B,UAAWyB,EAAOI,iBAU5Bb,EAAEF,UAtCa,4C,6GA2CP,IAAD,OAEP,MAAyB,MAArBgB,KAAK5B,MAAMI,MACN,6CAEL,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWf,OAAQ,SAACmB,GAAD,OAAW,EAAKD,UAAUC,OAW7C,yBAAK9B,UAAU,OAGb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWO,OAAQ,SAAC6B,GAAD,OAAO,EAAKD,eAAeC,IAAIzB,OAAQ,SAACmB,GAAD,OAAW,EAAKD,UAAUC,MACpF,yBAAK9B,UAAU,qBAEZkD,KAAK5B,MAAMG,iB,GA5GN0B,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e341cb6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './wallpaper.css';\r\n\r\nconst wallpaper = () => {\r\n    return (\r\n        <div className=\"area\">\r\n\r\n            <ul className=\"circles\">\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n            </ul>\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default wallpaper","import React from 'react';\r\nimport './nav.css';\r\n\r\nconst nav = () => {\r\n    return (\r\n        <div className=\"nav\">\r\n\r\n            <h1 style={{ flexGrow: \"20\" }} className=\"title\">Github Tracker</h1>\r\n            <div style={{ flexGrow: \"10\" }} className=\"navitems\">\r\n            <button  className=\"home button\">Home</button>\r\n            <button className=\"about button\">About</button>\r\n            </div>\r\n\r\n\r\n         </div>\r\n    )\r\n\r\n};\r\n\r\nexport default nav","import React from 'react';\r\nimport './searchbar.css';\r\nimport Nav from './nav'\r\n\r\n\r\n\r\nconst searchbar = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Nav />\r\n            <div className=\"searchbar\">\r\n\r\n                <form className=\"example\" onSubmit={props.submit} >\r\n                    <input type=\"text\" placeholder=\"Search..\" onChange={props.change}></input>\r\n                    <button className=\"searchbutton\" type=\"submit\"><i className=\"fa fa-search\"></i></button>\r\n                </form>\r\n\r\n            </div>\r\n            <div className=\"warning\">\r\n                <p className=\"warningText\">Please enter the username</p>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default searchbar","import React from 'react';\r\nimport './persons.css';\r\n// import Fetchusers from './fetch'\r\n\r\n\r\nconst persons = (props) => {\r\n    return (\r\n        <div className=\"persons\">\r\n            <div className=\"outerDarkPart\">\r\n                <div className=\"inside\">\r\n                    {/* eslint-disable-next-line  */}\r\n                    <img src={props.imageURL} alt=\"ProfilePic\" className=\"image\" key={props.id} ></img>\r\n                    <h4>{props.name}</h4>\r\n\r\n                    <div className=\"firstVal\"><a className=\"white\" href={props.personURL}>\r\n                        <p><span className=\"bg\"></span><span className=\"base\"></span><span className=\"text\">VISIT PAGE</span></p></a>\r\n                        \r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default persons","import React from 'react';\nimport { Component } from 'react';\n\n// import logo from './logo.svg';\nimport './App.css';\n// import Nav from './nav'\nimport Wallpaper from './wallpaper'\nimport Searchbar from './searchbar'\nimport Persons from './persons'\n\n\nclass App extends Component {\n\n  state = {\n    outputPersons: 's',\n    loading: false,\n    personsJSX: null,\n    value: \"2\",\n    url: null,\n    doIt: false,\n  };\n\n\n\n  // async componentDidUpdate() {\n  //   if (this.state.doIt === true) {\n  //     const url = \"https://api.github.com/search/users?q=\" + this.state.searchStr + \"&page=1&per_page=10\"\n\n  //     const response = await fetch(url);\n  //     const data = await response.json();\n  //     this.setState({\n  //       verify: data.items[0],\n  //       persons: data.items,\n\n  //       loading: false\n  //     }\n  //     );\n  //     console.log(this.state.verify)\n  //   }\n\n  //   this.setState({doIt: false})\n  // }\n\n  getSearch = (event) => {\n    this.setState({ value: event.target.value })\n    event.preventDefault()\n    event.persist()\n\n  }\n\n\n\n  submitToSearch = async (e) => {\n    // this.setState({\n    //   outputPersons: true\n    // });\n    e.preventDefault();\n    e.persist()\n\n    const url = \"https://api.github.com/search/users?q=\" + this.state.value + \"&page=1&per_page=18\"\n\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      verify: data.items[0],\n      persons: data.items,\n\n      loading: false\n    }\n    );\n\n    this.setState({\n      personsJSX: (\n        <div className=\"backspacepersons\">\n          {this.state.persons.map((person, index) => {\n\n            return <Persons\n              name={person.login}\n              key={person.id}\n              imageURL={person.avatar_url}\n              personURL={person.html_url}\n            ></Persons>\n          })}\n        </div>\n      )\n    })\n    // } else {\n    //   this.setState({ personsJSX: null })\n    // }\n\n    e.persist();\n\n\n  }\n\n  render() {\n\n    if (this.state.value === '3') {\n      return <div>\n        Enter a value\n        <Wallpaper />\n        <Searchbar change={(event) => this.getSearch(event)} />\n      </div>;\n    }\n\n    // if (!this.state.verify) {\n    //   return <div>didn't get a person</div>;\n    // }\n\n\n    else {\n      return (\n        <div className=\"App\" >\n\n\n          <Wallpaper />\n          <Searchbar submit={(e) => this.submitToSearch(e)} change={(event) => this.getSearch(event)} />\n          <div className=\"backspacepersonss\">\n\n            {this.state.personsJSX}\n\n            {/* <Persons imageURL={this.state.personPic} />\n            <Persons imageURL={this.state.personPic} />\n            <Persons imageURL={this.state.personPic} /> */}\n\n          </div>\n\n\n\n\n          {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n        </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n        </a>\n        </header> */}\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}